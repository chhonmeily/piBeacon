#!/bin/sh

### BEGIN INIT INFO
# Provides: piBeacon
# Required-Start:    $local_fs $syslog $remote_fs dbus bluetooth
# Required-Stop:     $local_fs $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start piBeacons
### END INIT INFO

. /lib/lsb/init-functions

FILE=`basename "$0"`
DEVICE_ID="${FILE##*.}"
APP_DIR="/opt/piBeacon"
NODE_APP="app$DEVICE_ID.js"
CONFIG_DIR="$APP_DIR"
PID_DIR="$APP_DIR/pid"
PID_FILE="$PID_DIR/app$DEVICE_ID.pid"
LOG_DIR="$APP_DIR/log"
LOG_FILE="$LOG_DIR/forever$DEVICE_ID.log"
APP_LOG_FILE="$LOG_DIR/app$DEVICE_ID.log"
APP_ERR_FILE="$LOG_DIR/err$DEVICE_ID.log"
NODE_EXEC="/usr/local/bin/forever"
. /etc/default/piBeacon

USAGE="Usage: $0 {start|stop|restart|status} [--force]"
FORCE_OP=false

pid_file_exists() {
    [ -f "$PID_FILE" ]
}

get_pid() {
    echo "$(cat "$PID_FILE")"
}

is_running() {
    PID=$(get_pid)
    ! [ -z "$(ps aux | awk '{print $2}' | grep "^$PID$")" ]
}

start_it() {
    mkdir -p "$PID_DIR"
    mkdir -p "$LOG_DIR"

    if [ $DEVICES -gt "0" ]
    then
       log_daemon_msg "Starting piBeacon $DEVICE_ID"
       BLENO_HCI_DEVICE_ID="$DEVICE_ID" FOREVER_ROOT="$APP_DIR/.forever" $NODE_EXEC -s -a -l $LOG_FILE -o $APP_LOG_FILE -e $APP_ERR_FILE --pidFile $PID_FILE start "$APP_DIR/$NODE_APP"
       while [ ! -f $PID_FILE ]
       do
           sleep 1
       done
       log_end_msg $?
   fi
}

stop_process() {
    FOREVER_ROOT="$APP_DIR/.forever" $NODE_EXEC stop "$APP_DIR/$NODE_APP"
}

remove_pid_file() {
    echo "Removing pid file"
    rm -f "$PID_FILE"
}

start_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo "Node app already running with pid $PID"
            exit 1
        else
            echo "Node app stopped, but pid file exists"
            if [ $FORCE_OP = true ]
            then
                echo "Forcing start anyways"
                remove_pid_file
                start_it
            fi
        fi
    else
        start_it
    fi
}

stop_app() {
    if pid_file_exists
    then
        if is_running
        then
            echo "Stopping node app ..."
            stop_process
            remove_pid_file
            echo "Node app stopped"
        else
            echo "Node app already stopped, but pid file exists"
            if [ $FORCE_OP = true ]
            then
                echo "Forcing stop anyways ..."
                remove_pid_file
                echo "Node app stopped"
            else
                exit 1
            fi
        fi
    else
        echo "Node app already stopped, pid file does not exist"
        exit 1
    fi
}

status_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo "Node app running with pid $PID"
        else
            echo "Node app stopped, but pid file exists"
        fi
    else
        echo "Node app stopped"
    fi
}

case "$2" in
    --force)
        FORCE_OP=true
    ;;

    "")
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac

case "$1" in
    start)
        start_app
    ;;

    stop)
        stop_app
    ;;

    restart)
        stop_app
        start_app
    ;;

    status)
        status_app
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac
